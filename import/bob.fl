# SPDX-License-Identifier: MIT
# Copyright (c) 2024 Aymeric Wibo

let __bob_has_been_imported__

class Cc(flags: vec<str>) {
	proto compile(src: vec<str>) -> vec<str>
}

class Dep(_kind: str) {
	let kind = _kind

	# For local dependencies.

	let local_path: str

	# For git dependencies.

	let git_url: str
	let git_branch: str

	# Constructors.

	static fn local(path: str) -> Dep {
		let dep = Dep("local")
		dep.local_path = path
		return dep
	}

	static fn git(url: str, branch: str) -> Dep {
		let dep = Dep("git")
		dep.git_url = url
		dep.git_branch = branch
		return dep
	}
}

class Fs {
	static proto list(path: str) -> vec<str>
	static proto exists(path: str) -> bool
}

class Linker(flags: vec<str>) {
	proto link(obj: vec<str>) -> str
	proto archive(obj: vec<str>) -> str
}

# This class provides platform-specific information.
class Platform {
	# Return the OS of the platform Bob is running on.
	# The output of this function is equivalent to the output of the uname(1) POSIX command.
	static proto os -> str
	static proto getenv(key: str) -> str
}

# Vector of other projects this project depends on.
let deps: vec<Dep> = []

# Map between cookies or source files and their corresponding (prefixless) install paths.
let install: map<str, str>

# Vector of the default run command for when using `bob run`.
# This is usually a command in the temporary install prefix.
# For example, if my project was the echo(1) POSIX command, the default run command could be `["echo"]`, such that I could run `bob run "Hello, world!"`.
#
# If this is set to `none`, running will be disabled and Bob will emit an error if the user tries to run `bob run`.
# This is useful for projects that are not meant to be run directly, such as libraries.
let run: vec<str> = []
